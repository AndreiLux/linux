#ifndef _MUIC_REGMAP_SM5720_
#define _MUIC_REGMAP_SM5720_

#include "muic-internal.h"
#include "muic_i2c.h"
#include "muic_regmap.h"

#define ADC_DETECT_TIME_200MS (0x03)
#define KEY_PRESS_TIME_100MS  (0x00)

enum sm5720_muic_reg_init_value {
	REG_INTMASK1_VALUE     = (0x1C),
	REG_INTMASK2_VALUE     = (0x18),
	REG_INTMASK3AFC_VALUE  = (0x00),
	REG_TIMING1_VALUE      = (ADC_DETECT_TIME_200MS | KEY_PRESS_TIME_100MS),
	REG_RSVDID2_VALUE      = (0x26),
#if defined(CONFIG_SUPPORT_QC30)
	REG_AFCCNTL_VALUE      = (0x20),
#endif
	REG_AFC_TXD_VALUE      = (0x79), /* 0x79 : 12V,2.1A */
	REG_INT_OPTION_VALUE   = (0x80),
};

/* sm5720 I2C registers */
enum sm5720_muic_reg {
	REG_DEVID    = 0x01,
	REG_CTRL     = 0x02,
	REG_INT1     = 0x03,
	REG_INT2     = 0x04,
	REG_INT3     = 0x05,
	REG_INTMASK1 = 0x06,
	REG_INTMASK2 = 0x07,
	REG_INTMASK3 = 0x08,
	REG_ADC      = 0x09,
	REG_DEVT1    = 0x0a,
	REG_DEVT2    = 0x0b,
	REG_DEVT3    = 0x0c,
	REG_TIMING1  = 0x0d,
	REG_TIMING2  = 0x0e,
	/* 0x0f is reserved. */
	REG_BTN1     = 0x10,
	REG_BTN2     = 0x11,
	REG_CarKit   = 0x12,
	REG_MANSW1   = 0x13,
	REG_MANSW2   = 0x14,
	REG_RSVDID1  = 0x15,
	REG_RSVDID2  = 0x16,
	REG_CHGTYPE  = 0x17,
	/* 0x18 ~ 0x23 for AFC  */
	REG_AFCCNTL     = 0x18,
	REG_AFCTXD      = 0x19,
	REG_AFCSTAT     = 0x1a,
	REG_VBUSVOL1    = 0x1b,
	REG_VBUSVOL2    = 0x1c,
	REG_AFCRXD1     = 0x1d,
	REG_AFCRXD2     = 0x1e,
	REG_AFCRXD3     = 0x1f,
	REG_AFCRXD4     = 0x20,
	REG_AFCRXD5     = 0x21,
	REG_AFCRXD6     = 0x22,
	REG_AFCTASTATUS = 0x23,
	REG_RESET       = 0x24,
	REG_GEN_CNTL	= 0x30,
	REG_INT_OPTION	= 0x37,

	REG_END,
};

#define REG_ITEM(addr, bitp, mask) ((bitp<<16) | (mask<<8) | addr)

/* Field */
enum sm5720_muic_reg_item {
	DEVID_VendorID = REG_ITEM(REG_DEVID, _BIT0, _MASK3),

	CTRL_SW_OPEN    = REG_ITEM(REG_CTRL, _BIT4, _MASK1),
	CTRL_RAWDATA    = REG_ITEM(REG_CTRL, _BIT3, _MASK1),
	CTRL_ManualSW   = REG_ITEM(REG_CTRL, _BIT2, _MASK1),
	CTRL_WAIT       = REG_ITEM(REG_CTRL, _BIT1, _MASK1),
	CTRL_MASK_INT   = REG_ITEM(REG_CTRL, _BIT0, _MASK1),

	INT1_DETACH = REG_ITEM(REG_INT1, _BIT1, _MASK1),
	INT1_ATTACH = REG_ITEM(REG_INT1, _BIT0, _MASK1),

	INT2_VBUSDET_ON  = REG_ITEM(REG_INT2, _BIT7, _MASK1),
	INT2_RID_CHARGER = REG_ITEM(REG_INT2, _BIT6, _MASK1),
	INT2_MHL         = REG_ITEM(REG_INT2, _BIT5, _MASK1),
	INT2_ADC_CHG     = REG_ITEM(REG_INT2, _BIT2, _MASK1),
	INT2_VBUS_OFF    = REG_ITEM(REG_INT2, _BIT0, _MASK1),

	INT3_QC20_ACCEPTED    = REG_ITEM(REG_INT3, _BIT6, _MASK1),
	INT3_AFC_ERROR        = REG_ITEM(REG_INT3, _BIT5, _MASK1),
	INT3_AFC_STA_CHG      = REG_ITEM(REG_INT3, _BIT4, _MASK1),
	INT3_MULTI_BYTE       = REG_ITEM(REG_INT3, _BIT3, _MASK1),
	INT3_VBUS_UPDATE      = REG_ITEM(REG_INT3, _BIT2, _MASK1),
	INT3_AFC_ACCEPTED     = REG_ITEM(REG_INT3, _BIT1, _MASK1),
	INT3_AFC_TA_ATTACHED  = REG_ITEM(REG_INT3, _BIT0, _MASK1),

	INTMASK1_DETACH_M     = REG_ITEM(REG_INTMASK1, _BIT1, _MASK1),
	INTMASK1_ATTACH_M     = REG_ITEM(REG_INTMASK1, _BIT0, _MASK1),

	INTMASK2_VBUSDET_ON_M = REG_ITEM(REG_INTMASK2, _BIT7, _MASK1),
	INTMASK2_RID_CHARGERM = REG_ITEM(REG_INTMASK2, _BIT6, _MASK1),
	INTMASK2_MHL_M        = REG_ITEM(REG_INTMASK2, _BIT5, _MASK1),
	INTMASK2_ADC_CHG_M    = REG_ITEM(REG_INTMASK2, _BIT2, _MASK1),
	INTMASK2_REV_ACCE_M   = REG_ITEM(REG_INTMASK2, _BIT1, _MASK1),
	INTMASK2_VBUS_OFF_M   = REG_ITEM(REG_INTMASK2, _BIT0, _MASK1),

	INT3_QC20_ACCEPTED_M    = REG_ITEM(REG_INTMASK3, _BIT6, _MASK1),
	INT3_AFC_ERROR_M        = REG_ITEM(REG_INTMASK3, _BIT5, _MASK1),
	INT3_AFC_STA_CHG_M      = REG_ITEM(REG_INTMASK3, _BIT4, _MASK1),
	INT3_MULTI_BYTE_M       = REG_ITEM(REG_INTMASK3, _BIT3, _MASK1),
	INT3_VBUS_UPDATE_M      = REG_ITEM(REG_INTMASK3, _BIT2, _MASK1),
	INT3_AFC_ACCEPTED_M     = REG_ITEM(REG_INTMASK3, _BIT1, _MASK1),
	INT3_AFC_TA_ATTACHED_M  = REG_ITEM(REG_INTMASK3, _BIT0, _MASK1),

	ADC_ADC_VALUE  =  REG_ITEM(REG_ADC, _BIT0, _MASK6),

	DEVT1_USB_OTG         = REG_ITEM(REG_DEVT1, _BIT7, _MASK1),
	DEVT1_DEDICATED_CHG   = REG_ITEM(REG_DEVT1, _BIT6, _MASK1),
	DEVT1_USB_CHG         = REG_ITEM(REG_DEVT1, _BIT5, _MASK1),
	DEVT1_CAR_KIT_CHARGER = REG_ITEM(REG_DEVT1, _BIT4, _MASK1),
	DEVT1_UART            = REG_ITEM(REG_DEVT1, _BIT3, _MASK1),
	DEVT1_USB             = REG_ITEM(REG_DEVT1, _BIT2, _MASK1),
	DEVT1_AUDIO_TYPE2     = REG_ITEM(REG_DEVT1, _BIT1, _MASK1),
	DEVT1_AUDIO_TYPE1     = REG_ITEM(REG_DEVT1, _BIT0, _MASK1),

	DEVT2_AV              = REG_ITEM(REG_DEVT2, _BIT6, _MASK1),
	DEVT2_TTY             = REG_ITEM(REG_DEVT2, _BIT5, _MASK1),
	DEVT2_PPD             = REG_ITEM(REG_DEVT2, _BIT4, _MASK1),
	DEVT2_JIG_UART_OFF    = REG_ITEM(REG_DEVT2, _BIT3, _MASK1),
	DEVT2_JIG_UART_ON     = REG_ITEM(REG_DEVT2, _BIT2, _MASK1),
	DEVT2_JIG_USB_OFF     = REG_ITEM(REG_DEVT2, _BIT1, _MASK1),
	DEVT2_JIG_USB_ON      = REG_ITEM(REG_DEVT2, _BIT0, _MASK1),

	DEVT3_AFC_TA          = REG_ITEM(REG_DEVT3, _BIT7, _MASK1),
	DEVT3_U200_CHG        = REG_ITEM(REG_DEVT3, _BIT6, _MASK1),
	DEVT3_LO_TA           = REG_ITEM(REG_DEVT3, _BIT5, _MASK1),
	DEVT3_AV_CABLE_VBUS   = REG_ITEM(REG_DEVT3, _BIT4, _MASK1),
	DEVT3_DCD_OUT_SDP     = REG_ITEM(REG_DEVT3, _BIT2, _MASK1),
	DEVT3_QC20_TA         = REG_ITEM(REG_DEVT3, _BIT1, _MASK1),
	DEVT3_MHL             = REG_ITEM(REG_DEVT3, _BIT0, _MASK1),

	TIMING1_KEY_PRESS_T   = REG_ITEM(REG_TIMING1, _BIT4, _MASK4),
	TIMING1_ADC_DET_T     = REG_ITEM(REG_TIMING1, _BIT0, _MASK4),

	TIMING2_SW_WAIT_T     = REG_ITEM(REG_TIMING2, _BIT4, _MASK4),
	TIMING2_LONG_KEY_T    = REG_ITEM(REG_TIMING2, _BIT0, _MASK4),

	MANSW1_DM_CON_SW      = REG_ITEM(REG_MANSW1, _BIT5, _MASK3),
	MANSW1_DP_CON_SW      = REG_ITEM(REG_MANSW1, _BIT2, _MASK3),

	MANSW1_DM_CON_USB_CP  = REG_ITEM(REG_MANSW1, _BIT7, _MASK3),
	MANSW1_DP_CON_USB_CP  = REG_ITEM(REG_MANSW1, _BIT4, _MASK3),

	MANSW2_JIG_ON         = REG_ITEM(REG_MANSW2, _BIT2, _MASK1),
	MANSW2_SINGLE_MODE    = REG_ITEM(REG_MANSW2, _BIT1, _MASK1),
	MANSW2_ID_SW          = REG_ITEM(REG_MANSW2, _BIT0, _MASK1),

	RSVDID1_VBUS_VALID    = REG_ITEM(REG_RSVDID1, _BIT0, _MASK1),

	RSVDID2_BC12OFF       = REG_ITEM(REG_RSVDID2, _BIT6, _MASK1),
	RSVDID2_CHGPUMP_nEN   = REG_ITEM(REG_RSVDID2, _BIT5, _MASK1),
	RSVDID2_BCD_RESCAN    = REG_ITEM(REG_RSVDID2, _BIT4, _MASK1),
	RSVDID2_VDP_SRC_EN    = REG_ITEM(REG_RSVDID2, _BIT3, _MASK1),
	RSVDID2_DCD_TIME_EN   = REG_ITEM(REG_RSVDID2, _BIT2, _MASK1),
	RSVDID2_DCD_TIMER     = REG_ITEM(REG_RSVDID2, _BIT1, _MASK1),

	CHGTYPE_CHG_TYPE      = REG_ITEM(REG_CHGTYPE, _BIT0, _MASK5),

	AFCCNTL_ENQC20        = REG_ITEM(REG_AFCCNTL, _BIT6, _MASK2),
	AFCCNTL_DISAFC        = REG_ITEM(REG_AFCCNTL, _BIT5, _MASK1),
	AFCCNTL_VBUS_READ     = REG_ITEM(REG_AFCCNTL, _BIT3, _MASK1),
	AFCCNTL_DM_RESET      = REG_ITEM(REG_AFCCNTL, _BIT2, _MASK1),
	AFCCNTL_DP_RESET      = REG_ITEM(REG_AFCCNTL, _BIT1, _MASK1),
	AFCCNTL_ENAFC         = REG_ITEM(REG_AFCCNTL, _BIT0, _MASK1),

	AFCTXD_VOLTAGE  = REG_ITEM(REG_AFCTXD, _BIT4, _MASK4),
	AFCTXD_CURRENT  = REG_ITEM(REG_AFCTXD, _BIT0, _MASK4),

	AFCSTAT_STATUS  = REG_ITEM(REG_AFCSTAT, _BIT0, _MASK8),

	VBUS_VOLTAGE1   = REG_ITEM(REG_VBUSVOL1, _BIT0, _MASK5),
	VBUS_VOLTAGE2   = REG_ITEM(REG_VBUSVOL2, _BIT0, _MASK8),

	AFCRXD1_DATA    = REG_ITEM(REG_AFCRXD1, _BIT0, _MASK8),
	AFCRXD2_DATA    = REG_ITEM(REG_AFCRXD2, _BIT0, _MASK8),
	AFCRXD3_DATA    = REG_ITEM(REG_AFCRXD3, _BIT0, _MASK8),
	AFCRXD4_DATA    = REG_ITEM(REG_AFCRXD4, _BIT0, _MASK8),
	AFCRXD5_DATA    = REG_ITEM(REG_AFCRXD5, _BIT0, _MASK8),
	AFCRXD6_DATA    = REG_ITEM(REG_AFCRXD6, _BIT0, _MASK8),

	AFCTASTATUS_DATA  = REG_ITEM(REG_AFCTASTATUS, _BIT0, _MASK1),

	GEN_CNTL = REG_ITEM(REG_GEN_CNTL, _BIT0, _MASK1),

	RESET_RESET = REG_ITEM(REG_RESET, _BIT0, _MASK1),
};

/* sm5720 Control register */
#define CTRL_SWITCH_OPEN_SHIFT  4
#define CTRL_RAW_DATA_SHIFT     3
#define CTRL_MANUAL_SW_SHIFT    2
#define CTRL_WAIT_SHIFT         1
#define CTRL_INT_MASK_SHIFT     0

#define CTRL_SWITCH_OPEN_MASK   (0x1 << CTRL_SWITCH_OPEN_SHIFT)
#define CTRL_RAW_DATA_MASK      (0x1 << CTRL_RAW_DATA_SHIFT)
#define CTRL_MANUAL_SW_MASK     (0x1 << CTRL_MANUAL_SW_SHIFT)
#define CTRL_WAIT_MASK          (0x1 << CTRL_WAIT_SHIFT)
#define CTRL_INT_MASK_MASK      (0x1 << CTRL_INT_MASK_SHIFT)
#define CTRL_MASK               (CTRL_SWITCH_OPEN_MASK | CTRL_RAW_DATA_MASK | \
		CTRL_MANUAL_SW_MASK | CTRL_WAIT_MASK )

/* SM5720 Device Type 3 register */
#define DEV_TYPE3_AFC_TA      (0x1 << 7)
#define DEV_TYPE3_QC20_TA     (0x1 << 1)

#define ENQC20_NONE  0x0
#define ENQC20_9V    0x1
#define ENQC20_12V   0x2
#define ENQC20_20V   0x3

struct reg_value_set {
	int value;
	char *alias;
};

/*
 * Manual Switch
 * D- [7:5] / D+ [4:2] / Reserved [1:0]
 * 000: Open all / 001: USB / 010: AUDIO / 011: UART / 100:USB_CP / 101: UART_CP
 * No Vbus switching in SM5720
 */
#define _D_OPEN   (0x0)
#define _D_USB    (0x1)
#define _D_AUDIO  (0x2)
#define _D_UART   (0x3)
#define _D_USB_CP (0x4)

/* COM patch Values */
#define COM_VALUE(dm) ((dm<<5) | (dm<<2))

#define _COM_OPEN       COM_VALUE(_D_OPEN)
//#define _COM_OPEN_WITH_V_BUS  COM_VALUE(_D_OPEN, _V_CHARGER)
#define _COM_UART_AP    COM_VALUE(_D_UART)
#define _COM_UART_CP    _COM_UART_AP
#define _COM_USB_AP     COM_VALUE(_D_USB)
#define _COM_USB_CP     COM_VALUE(_D_USB_CP)
#define _COM_AUDIO      COM_VALUE(_D_AUDIO)

#define REG_CTRL_INITIAL (CTRL_MASK)


#endif
